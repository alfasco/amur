
var __extends=(this&&this.__extends)||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];function __(){this.constructor=d;}
d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};import{Directive,Host,Inject,Input,Optional,Output,Self,SkipSelf,forwardRef}from'@angular/core';import{EventEmitter}from'../../facade/async';import{NG_ASYNC_VALIDATORS,NG_VALIDATORS}from'../../validators';import{AbstractFormGroupDirective}from'../abstract_form_group_directive';import{ControlContainer}from'../control_container';import{NG_VALUE_ACCESSOR}from'../control_value_accessor';import{NgControl}from'../ng_control';import{ReactiveErrors}from'../reactive_errors';import{composeAsyncValidators,composeValidators,controlPath,isPropertyUpdated,selectValueAccessor}from'../shared';import{FormGroupDirective}from'./form_group_directive';import{FormArrayName,FormGroupName}from'./form_group_name';export var controlNameBinding={provide:NgControl,useExisting:forwardRef(function(){return FormControlName;})};export var FormControlName=(function(_super){__extends(FormControlName,_super);function FormControlName(parent,validators,asyncValidators,valueAccessors){_super.call(this);this._added=false;this.update=new EventEmitter();this._parent=parent;this._rawValidators=validators||[];this._rawAsyncValidators=asyncValidators||[];this.valueAccessor=selectValueAccessor(this,valueAccessors);}
Object.defineProperty(FormControlName.prototype,"isDisabled",{set:function(isDisabled){ReactiveErrors.disabledAttrWarning();},enumerable:true,configurable:true});FormControlName.prototype.ngOnChanges=function(changes){if(!this._added){this._checkParentType();this.formDirective.addControl(this);if(this.control.disabled)
this.valueAccessor.setDisabledState(true);this._added=true;}
if(isPropertyUpdated(changes,this.viewModel)){this.viewModel=this.model;this.formDirective.updateModel(this,this.model);}};FormControlName.prototype.ngOnDestroy=function(){if(this.formDirective){this.formDirective.removeControl(this);}};FormControlName.prototype.viewToModelUpdate=function(newValue){this.viewModel=newValue;this.update.emit(newValue);};Object.defineProperty(FormControlName.prototype,"path",{get:function(){return controlPath(this.name,this._parent);},enumerable:true,configurable:true});Object.defineProperty(FormControlName.prototype,"formDirective",{get:function(){return this._parent?this._parent.formDirective:null;},enumerable:true,configurable:true});Object.defineProperty(FormControlName.prototype,"validator",{get:function(){return composeValidators(this._rawValidators);},enumerable:true,configurable:true});Object.defineProperty(FormControlName.prototype,"asyncValidator",{get:function(){return composeAsyncValidators(this._rawAsyncValidators);},enumerable:true,configurable:true});Object.defineProperty(FormControlName.prototype,"control",{get:function(){return this.formDirective.getControl(this);},enumerable:true,configurable:true});FormControlName.prototype._checkParentType=function(){if(!(this._parent instanceof FormGroupName)&&this._parent instanceof AbstractFormGroupDirective){ReactiveErrors.ngModelGroupException();}
else if(!(this._parent instanceof FormGroupName)&&!(this._parent instanceof FormGroupDirective)&&!(this._parent instanceof FormArrayName)){ReactiveErrors.controlParentException();}};FormControlName.decorators=[{type:Directive,args:[{selector:'[formControlName]',providers:[controlNameBinding]},]},];FormControlName.ctorParameters=[{type:ControlContainer,decorators:[{type:Optional},{type:Host},{type:SkipSelf},]},{type:Array,decorators:[{type:Optional},{type:Self},{type:Inject,args:[NG_VALIDATORS,]},]},{type:Array,decorators:[{type:Optional},{type:Self},{type:Inject,args:[NG_ASYNC_VALIDATORS,]},]},{type:Array,decorators:[{type:Optional},{type:Self},{type:Inject,args:[NG_VALUE_ACCESSOR,]},]},];FormControlName.propDecorators={'name':[{type:Input,args:['formControlName',]},],'model':[{type:Input,args:['ngModel',]},],'update':[{type:Output,args:['ngModelChange',]},],'isDisabled':[{type:Input,args:['disabled',]},],};return FormControlName;}(NgControl));