
import{Directive,ElementRef,Host,Input,Optional,Renderer,forwardRef}from'@angular/core';import{MapWrapper}from'../facade/collection';import{StringWrapper,isBlank,isPresent,isPrimitive,looseIdentical}from'../facade/lang';import{NG_VALUE_ACCESSOR}from'./control_value_accessor';export var SELECT_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(function(){return SelectControlValueAccessor;}),multi:true};function _buildValueString(id,value){if(isBlank(id))
return""+value;if(!isPrimitive(value))
value='Object';return StringWrapper.slice(id+": "+value,0,50);}
function _extractId(valueString){return valueString.split(':')[0];}
export var SelectControlValueAccessor=(function(){function SelectControlValueAccessor(_renderer,_elementRef){this._renderer=_renderer;this._elementRef=_elementRef;this._optionMap=new Map();this._idCounter=0;this.onChange=function(_){};this.onTouched=function(){};}
SelectControlValueAccessor.prototype.writeValue=function(value){this.value=value;var valueString=_buildValueString(this._getOptionId(value),value);this._renderer.setElementProperty(this._elementRef.nativeElement,'value',valueString);};SelectControlValueAccessor.prototype.registerOnChange=function(fn){var _this=this;this.onChange=function(valueString){_this.value=valueString;fn(_this._getOptionValue(valueString));};};SelectControlValueAccessor.prototype.registerOnTouched=function(fn){this.onTouched=fn;};SelectControlValueAccessor.prototype.setDisabledState=function(isDisabled){this._renderer.setElementProperty(this._elementRef.nativeElement,'disabled',isDisabled);};SelectControlValueAccessor.prototype._registerOption=function(){return(this._idCounter++).toString();};SelectControlValueAccessor.prototype._getOptionId=function(value){for(var _i=0,_a=MapWrapper.keys(this._optionMap);_i<_a.length;_i++){var id=_a[_i];if(looseIdentical(this._optionMap.get(id),value))
return id;}
return null;};SelectControlValueAccessor.prototype._getOptionValue=function(valueString){var value=this._optionMap.get(_extractId(valueString));return isPresent(value)?value:valueString;};SelectControlValueAccessor.decorators=[{type:Directive,args:[{selector:'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',host:{'(change)':'onChange($event.target.value)','(blur)':'onTouched()'},providers:[SELECT_VALUE_ACCESSOR]},]},];SelectControlValueAccessor.ctorParameters=[{type:Renderer,},{type:ElementRef,},];return SelectControlValueAccessor;}());export var NgSelectOption=(function(){function NgSelectOption(_element,_renderer,_select){this._element=_element;this._renderer=_renderer;this._select=_select;if(isPresent(this._select))
this.id=this._select._registerOption();}
Object.defineProperty(NgSelectOption.prototype,"ngValue",{set:function(value){if(this._select==null)
return;this._select._optionMap.set(this.id,value);this._setElementValue(_buildValueString(this.id,value));this._select.writeValue(this._select.value);},enumerable:true,configurable:true});Object.defineProperty(NgSelectOption.prototype,"value",{set:function(value){this._setElementValue(value);if(isPresent(this._select))
this._select.writeValue(this._select.value);},enumerable:true,configurable:true});NgSelectOption.prototype._setElementValue=function(value){this._renderer.setElementProperty(this._element.nativeElement,'value',value);};NgSelectOption.prototype.ngOnDestroy=function(){if(isPresent(this._select)){this._select._optionMap.delete(this.id);this._select.writeValue(this._select.value);}};NgSelectOption.decorators=[{type:Directive,args:[{selector:'option'},]},];NgSelectOption.ctorParameters=[{type:ElementRef,},{type:Renderer,},{type:SelectControlValueAccessor,decorators:[{type:Optional},{type:Host},]},];NgSelectOption.propDecorators={'ngValue':[{type:Input,args:['ngValue',]},],'value':[{type:Input,args:['value',]},],};return NgSelectOption;}());