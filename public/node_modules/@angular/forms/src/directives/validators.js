
import{Directive,Input,forwardRef}from'@angular/core';import{isPresent}from'../facade/lang';import{NG_VALIDATORS,Validators}from'../validators';export var REQUIRED_VALIDATOR={provide:NG_VALIDATORS,useExisting:forwardRef(function(){return RequiredValidator;}),multi:true};export var RequiredValidator=(function(){function RequiredValidator(){}
Object.defineProperty(RequiredValidator.prototype,"required",{get:function(){return this._required;},set:function(value){this._required=isPresent(value)&&""+value!=='false';if(this._onChange)
this._onChange();},enumerable:true,configurable:true});RequiredValidator.prototype.validate=function(c){return this.required?Validators.required(c):null;};RequiredValidator.prototype.registerOnChange=function(fn){this._onChange=fn;};RequiredValidator.decorators=[{type:Directive,args:[{selector:'[required][formControlName],[required][formControl],[required][ngModel]',providers:[REQUIRED_VALIDATOR],host:{'[attr.required]':'required? "" : null'}},]},];RequiredValidator.ctorParameters=[];RequiredValidator.propDecorators={'required':[{type:Input},],};return RequiredValidator;}());export var MIN_LENGTH_VALIDATOR={provide:NG_VALIDATORS,useExisting:forwardRef(function(){return MinLengthValidator;}),multi:true};export var MinLengthValidator=(function(){function MinLengthValidator(){}
MinLengthValidator.prototype._createValidator=function(){this._validator=Validators.minLength(parseInt(this.minlength,10));};MinLengthValidator.prototype.ngOnChanges=function(changes){if(changes['minlength']){this._createValidator();if(this._onChange)
this._onChange();}};MinLengthValidator.prototype.validate=function(c){return isPresent(this.minlength)?this._validator(c):null;};MinLengthValidator.prototype.registerOnChange=function(fn){this._onChange=fn;};MinLengthValidator.decorators=[{type:Directive,args:[{selector:'[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',providers:[MIN_LENGTH_VALIDATOR],host:{'[attr.minlength]':'minlength? minlength : null'}},]},];MinLengthValidator.ctorParameters=[];MinLengthValidator.propDecorators={'minlength':[{type:Input},],};return MinLengthValidator;}());export var MAX_LENGTH_VALIDATOR={provide:NG_VALIDATORS,useExisting:forwardRef(function(){return MaxLengthValidator;}),multi:true};export var MaxLengthValidator=(function(){function MaxLengthValidator(){}
MaxLengthValidator.prototype._createValidator=function(){this._validator=Validators.maxLength(parseInt(this.maxlength,10));};MaxLengthValidator.prototype.ngOnChanges=function(changes){if(changes['maxlength']){this._createValidator();if(this._onChange)
this._onChange();}};MaxLengthValidator.prototype.validate=function(c){return isPresent(this.maxlength)?this._validator(c):null;};MaxLengthValidator.prototype.registerOnChange=function(fn){this._onChange=fn;};MaxLengthValidator.decorators=[{type:Directive,args:[{selector:'[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',providers:[MAX_LENGTH_VALIDATOR],host:{'[attr.maxlength]':'maxlength? maxlength : null'}},]},];MaxLengthValidator.ctorParameters=[];MaxLengthValidator.propDecorators={'maxlength':[{type:Input},],};return MaxLengthValidator;}());export var PATTERN_VALIDATOR={provide:NG_VALIDATORS,useExisting:forwardRef(function(){return PatternValidator;}),multi:true};export var PatternValidator=(function(){function PatternValidator(){}
PatternValidator.prototype._createValidator=function(){this._validator=Validators.pattern(this.pattern);};PatternValidator.prototype.ngOnChanges=function(changes){if(changes['pattern']){this._createValidator();if(this._onChange)
this._onChange();}};PatternValidator.prototype.validate=function(c){return isPresent(this.pattern)?this._validator(c):null;};PatternValidator.prototype.registerOnChange=function(fn){this._onChange=fn;};PatternValidator.decorators=[{type:Directive,args:[{selector:'[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',providers:[PATTERN_VALIDATOR],host:{'[attr.pattern]':'pattern? pattern : null'}},]},];PatternValidator.ctorParameters=[];PatternValidator.propDecorators={'pattern':[{type:Input},],};return PatternValidator;}());