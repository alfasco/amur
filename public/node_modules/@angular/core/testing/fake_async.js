
var FakeAsyncTestZoneSpec=Zone['FakeAsyncTestZoneSpec'];var ProxyZoneSpec=Zone['ProxyZoneSpec'];var _fakeAsyncTestZoneSpec=null;export function resetFakeAsyncZone(){_fakeAsyncTestZoneSpec=null;ProxyZoneSpec.assertPresent().resetDelegate();}
var _inFakeAsyncCall=false;export function fakeAsync(fn){return function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i-0]=arguments[_i];}
var proxyZoneSpec=ProxyZoneSpec.assertPresent();if(_inFakeAsyncCall){throw new Error('fakeAsync() calls can not be nested');}
_inFakeAsyncCall=true;try{if(!_fakeAsyncTestZoneSpec){if(proxyZoneSpec.getDelegate()instanceof FakeAsyncTestZoneSpec){throw new Error('fakeAsync() calls can not be nested');}
_fakeAsyncTestZoneSpec=new FakeAsyncTestZoneSpec();}
var res=void 0;var lastProxyZoneSpec=proxyZoneSpec.getDelegate();proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);try{res=fn.apply(void 0,args);flushMicrotasks();}
finally{proxyZoneSpec.setDelegate(lastProxyZoneSpec);}
if(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length>0){throw new Error((_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length+" ")+"periodic timer(s) still in the queue.");}
if(_fakeAsyncTestZoneSpec.pendingTimers.length>0){throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length+" timer(s) still in the queue.");}
return res;}
finally{_inFakeAsyncCall=false;resetFakeAsyncZone();}};}
function _getFakeAsyncZoneSpec(){if(_fakeAsyncTestZoneSpec==null){throw new Error('The code should be running in the fakeAsync zone to call this function');}
return _fakeAsyncTestZoneSpec;}
export function tick(millis){if(millis===void 0){millis=0;}
_getFakeAsyncZoneSpec().tick(millis);}
export function discardPeriodicTasks(){var zoneSpec=_getFakeAsyncZoneSpec();var pendingTimers=zoneSpec.pendingPeriodicTimers;zoneSpec.pendingPeriodicTimers.length=0;}
export function flushMicrotasks(){_getFakeAsyncZoneSpec().flushMicrotasks();}