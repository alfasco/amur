
import{global,isFunction,stringify}from'../facade/lang';var _nextClassId=0;function extractAnnotation(annotation){if(isFunction(annotation)&&annotation.hasOwnProperty('annotation')){annotation=annotation.annotation;}
return annotation;}
function applyParams(fnOrArray,key){if(fnOrArray===Object||fnOrArray===String||fnOrArray===Function||fnOrArray===Number||fnOrArray===Array){throw new Error("Can not use native "+stringify(fnOrArray)+" as constructor");}
if(isFunction(fnOrArray)){return fnOrArray;}
else if(fnOrArray instanceof Array){var annotations=fnOrArray;var annoLength=annotations.length-1;var fn=fnOrArray[annoLength];if(!isFunction(fn)){throw new Error("Last position of Class method array must be Function in key "+key+" was '"+stringify(fn)+"'");}
if(annoLength!=fn.length){throw new Error("Number of annotations ("+annoLength+") does not match number of arguments ("+fn.length+") in the function: "+stringify(fn));}
var paramsAnnotations=[];for(var i=0,ii=annotations.length-1;i<ii;i++){var paramAnnotations=[];paramsAnnotations.push(paramAnnotations);var annotation=annotations[i];if(annotation instanceof Array){for(var j=0;j<annotation.length;j++){paramAnnotations.push(extractAnnotation(annotation[j]));}}
else if(isFunction(annotation)){paramAnnotations.push(extractAnnotation(annotation));}
else{paramAnnotations.push(annotation);}}
Reflect.defineMetadata('parameters',paramsAnnotations,fn);return fn;}
else{throw new Error("Only Function or Array is supported in Class definition for key '"+key+"' is '"+stringify(fnOrArray)+"'");}}
export function Class(clsDef){var constructor=applyParams(clsDef.hasOwnProperty('constructor')?clsDef.constructor:undefined,'constructor');var proto=constructor.prototype;if(clsDef.hasOwnProperty('extends')){if(isFunction(clsDef.extends)){constructor.prototype=proto=Object.create(clsDef.extends.prototype);}
else{throw new Error("Class definition 'extends' property must be a constructor function was: "+stringify(clsDef.extends));}}
for(var key in clsDef){if(key!='extends'&&key!='prototype'&&clsDef.hasOwnProperty(key)){proto[key]=applyParams(clsDef[key],key);}}
if(this&&this.annotations instanceof Array){Reflect.defineMetadata('annotations',this.annotations,constructor);}
var constructorName=constructor['name'];if(!constructorName||constructorName==='constructor'){constructor['overriddenName']="class"+_nextClassId++;}
return constructor;}
var Reflect=global.Reflect;export function makeDecorator(annotationCls,chainFn){if(chainFn===void 0){chainFn=null;}
function DecoratorFactory(objOrType){if(!(Reflect&&Reflect.getMetadata)){throw'reflect-metadata shim is required when using class decorators';}
var annotationInstance=new annotationCls(objOrType);if(this instanceof annotationCls){return annotationInstance;}
else{var chainAnnotation=isFunction(this)&&this.annotations instanceof Array?this.annotations:[];chainAnnotation.push(annotationInstance);var TypeDecorator=function TypeDecorator(cls){var annotations=Reflect.getOwnMetadata('annotations',cls)||[];annotations.push(annotationInstance);Reflect.defineMetadata('annotations',annotations,cls);return cls;};TypeDecorator.annotations=chainAnnotation;TypeDecorator.Class=Class;if(chainFn)
chainFn(TypeDecorator);return TypeDecorator;}}
DecoratorFactory.prototype=Object.create(annotationCls.prototype);DecoratorFactory.annotationCls=annotationCls;return DecoratorFactory;}
export function makeParamDecorator(annotationCls){function ParamDecoratorFactory(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i-0]=arguments[_i];}
var annotationInstance=Object.create(annotationCls.prototype);annotationCls.apply(annotationInstance,args);if(this instanceof annotationCls){return annotationInstance;}
else{ParamDecorator.annotation=annotationInstance;return ParamDecorator;}
function ParamDecorator(cls,unusedKey,index){var parameters=Reflect.getMetadata('parameters',cls)||[];while(parameters.length<=index){parameters.push(null);}
parameters[index]=parameters[index]||[];var annotationsForParam=parameters[index];annotationsForParam.push(annotationInstance);Reflect.defineMetadata('parameters',parameters,cls);return cls;}}
ParamDecoratorFactory.prototype=Object.create(annotationCls.prototype);ParamDecoratorFactory.annotationCls=annotationCls;return ParamDecoratorFactory;}
export function makePropDecorator(annotationCls){function PropDecoratorFactory(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i-0]=arguments[_i];}
var decoratorInstance=Object.create(annotationCls.prototype);annotationCls.apply(decoratorInstance,args);if(this instanceof annotationCls){return decoratorInstance;}
else{return function PropDecorator(target,name){var meta=Reflect.getOwnMetadata('propMetadata',target.constructor)||{};meta[name]=meta[name]||[];meta[name].unshift(decoratorInstance);Reflect.defineMetadata('propMetadata',meta,target.constructor);};}}
PropDecoratorFactory.prototype=Object.create(annotationCls.prototype);PropDecoratorFactory.annotationCls=annotationCls;return PropDecoratorFactory;}