
import{ListWrapper,MapWrapper}from'../facade/collection';import{isArray,isBlank,isPresent}from'../facade/lang';import{reflector}from'../reflection/reflection';import{Type}from'../type';import{resolveForwardRef}from'./forward_ref';import{DependencyMetadata,HostMetadata,InjectMetadata,OptionalMetadata,SelfMetadata,SkipSelfMetadata}from'./metadata';import{InvalidProviderError,MixingMultiProvidersWithRegularProvidersError,NoAnnotationError}from'./reflective_errors';import{ReflectiveKey}from'./reflective_key';export var ReflectiveDependency=(function(){function ReflectiveDependency(key,optional,lowerBoundVisibility,upperBoundVisibility,properties){this.key=key;this.optional=optional;this.lowerBoundVisibility=lowerBoundVisibility;this.upperBoundVisibility=upperBoundVisibility;this.properties=properties;}
ReflectiveDependency.fromKey=function(key){return new ReflectiveDependency(key,false,null,null,[]);};return ReflectiveDependency;}());var _EMPTY_LIST=[];export var ResolvedReflectiveProvider_=(function(){function ResolvedReflectiveProvider_(key,resolvedFactories,multiProvider){this.key=key;this.resolvedFactories=resolvedFactories;this.multiProvider=multiProvider;}
Object.defineProperty(ResolvedReflectiveProvider_.prototype,"resolvedFactory",{get:function(){return this.resolvedFactories[0];},enumerable:true,configurable:true});return ResolvedReflectiveProvider_;}());export var ResolvedReflectiveFactory=(function(){function ResolvedReflectiveFactory(factory,dependencies){this.factory=factory;this.dependencies=dependencies;}
return ResolvedReflectiveFactory;}());function resolveReflectiveFactory(provider){var factoryFn;var resolvedDeps;if(isPresent(provider.useClass)){var useClass=resolveForwardRef(provider.useClass);factoryFn=reflector.factory(useClass);resolvedDeps=_dependenciesFor(useClass);}
else if(isPresent(provider.useExisting)){factoryFn=function(aliasInstance){return aliasInstance;};resolvedDeps=[ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];}
else if(isPresent(provider.useFactory)){factoryFn=provider.useFactory;resolvedDeps=constructDependencies(provider.useFactory,provider.deps);}
else{factoryFn=function(){return provider.useValue;};resolvedDeps=_EMPTY_LIST;}
return new ResolvedReflectiveFactory(factoryFn,resolvedDeps);}
function resolveReflectiveProvider(provider){return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide),[resolveReflectiveFactory(provider)],provider.multi);}
export function resolveReflectiveProviders(providers){var normalized=_normalizeProviders(providers,[]);var resolved=normalized.map(resolveReflectiveProvider);return MapWrapper.values(mergeResolvedReflectiveProviders(resolved,new Map()));}
export function mergeResolvedReflectiveProviders(providers,normalizedProvidersMap){for(var i=0;i<providers.length;i++){var provider=providers[i];var existing=normalizedProvidersMap.get(provider.key.id);if(isPresent(existing)){if(provider.multiProvider!==existing.multiProvider){throw new MixingMultiProvidersWithRegularProvidersError(existing,provider);}
if(provider.multiProvider){for(var j=0;j<provider.resolvedFactories.length;j++){existing.resolvedFactories.push(provider.resolvedFactories[j]);}}
else{normalizedProvidersMap.set(provider.key.id,provider);}}
else{var resolvedProvider;if(provider.multiProvider){resolvedProvider=new ResolvedReflectiveProvider_(provider.key,ListWrapper.clone(provider.resolvedFactories),provider.multiProvider);}
else{resolvedProvider=provider;}
normalizedProvidersMap.set(provider.key.id,resolvedProvider);}}
return normalizedProvidersMap;}
function _normalizeProviders(providers,res){providers.forEach(function(b){if(b instanceof Type){res.push({provide:b,useClass:b});}
else if(b&&typeof b=='object'&&b.provide!==undefined){res.push(b);}
else if(b instanceof Array){_normalizeProviders(b,res);}
else{throw new InvalidProviderError(b);}});return res;}
export function constructDependencies(typeOrFunc,dependencies){if(isBlank(dependencies)){return _dependenciesFor(typeOrFunc);}
else{var params=dependencies.map(function(t){return[t];});return dependencies.map(function(t){return _extractToken(typeOrFunc,t,params);});}}
function _dependenciesFor(typeOrFunc){var params=reflector.parameters(typeOrFunc);if(isBlank(params))
return[];if(params.some(isBlank)){throw new NoAnnotationError(typeOrFunc,params);}
return params.map(function(p){return _extractToken(typeOrFunc,p,params);});}
function _extractToken(typeOrFunc,metadata,params){var depProps=[];var token=null;var optional=false;if(!isArray(metadata)){if(metadata instanceof InjectMetadata){return _createDependency(metadata.token,optional,null,null,depProps);}
else{return _createDependency(metadata,optional,null,null,depProps);}}
var lowerBoundVisibility=null;var upperBoundVisibility=null;for(var i=0;i<metadata.length;++i){var paramMetadata=metadata[i];if(paramMetadata instanceof Type){token=paramMetadata;}
else if(paramMetadata instanceof InjectMetadata){token=paramMetadata.token;}
else if(paramMetadata instanceof OptionalMetadata){optional=true;}
else if(paramMetadata instanceof SelfMetadata){upperBoundVisibility=paramMetadata;}
else if(paramMetadata instanceof HostMetadata){upperBoundVisibility=paramMetadata;}
else if(paramMetadata instanceof SkipSelfMetadata){lowerBoundVisibility=paramMetadata;}
else if(paramMetadata instanceof DependencyMetadata){if(isPresent(paramMetadata.token)){token=paramMetadata.token;}
depProps.push(paramMetadata);}}
token=resolveForwardRef(token);if(isPresent(token)){return _createDependency(token,optional,lowerBoundVisibility,upperBoundVisibility,depProps);}
else{throw new NoAnnotationError(typeOrFunc,params);}}
function _createDependency(token,optional,lowerBoundVisibility,upperBoundVisibility,depProps){return new ReflectiveDependency(ReflectiveKey.get(token),optional,lowerBoundVisibility,upperBoundVisibility,depProps);}