
"use strict";var tsc_wrapped_1=require('@angular/tsc-wrapped');var fs=require('fs');var path=require('path');var ts=require('typescript');var private_import_compiler_1=require('./private_import_compiler');var static_reflector_1=require('./static_reflector');var EXT=/(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;var DTS=/\.d\.ts$/;var NODE_MODULES='/node_modules/';var IS_GENERATED=/\.(ngfactory|css(\.shim)?)$/;var ReflectorHost=(function(){function ReflectorHost(program,compilerHost,options,context){this.program=program;this.compilerHost=compilerHost;this.options=options;this.metadataCollector=new tsc_wrapped_1.MetadataCollector();this.typeCache=new Map();this.resolverCache=new Map();this.basePath=path.normalize(path.join(this.options.basePath,'.')).replace(/\\/g,'/');this.genDir=path.normalize(path.join(this.options.genDir,'.')).replace(/\\/g,'/');this.context=context||new NodeReflectorHostContext();var genPath=path.relative(this.basePath,this.genDir);this.isGenDirChildOfRootDir=genPath===''||!genPath.startsWith('..');}
ReflectorHost.prototype.angularImportLocations=function(){return{coreDecorators:'@angular/core/src/metadata',diDecorators:'@angular/core/src/di/decorators',diMetadata:'@angular/core/src/di/metadata',diOpaqueToken:'@angular/core/src/di/opaque_token',animationMetadata:'@angular/core/src/animation/metadata',provider:'@angular/core/src/di/provider'};};ReflectorHost.prototype.getCanonicalFileName=function(fileName){return fileName;};ReflectorHost.prototype.resolve=function(m,containingFile){m=m.replace(EXT,'');var resolved=ts.resolveModuleName(m,containingFile.replace(/\\/g,'/'),this.options,this.context).resolvedModule;return resolved?resolved.resolvedFileName:null;};;ReflectorHost.prototype.normalizeAssetUrl=function(url){var assetUrl=private_import_compiler_1.AssetUrl.parse(url);var path=assetUrl?assetUrl.packageName+"/"+assetUrl.modulePath:null;return this.getCanonicalFileName(path);};ReflectorHost.prototype.resolveAssetUrl=function(url,containingFile){var assetUrl=this.normalizeAssetUrl(url);if(assetUrl){return this.getCanonicalFileName(this.resolve(assetUrl,containingFile));}
return url;};ReflectorHost.prototype.getImportPath=function(containingFile,importedFile){importedFile=this.resolveAssetUrl(importedFile,containingFile);containingFile=this.resolveAssetUrl(containingFile,'');if(!this.compilerHost.fileExists(importedFile)){this.context.assumeFileExists(importedFile);}
containingFile=this.rewriteGenDirPath(containingFile);var containingDir=path.dirname(containingFile);importedFile=importedFile.replace(EXT,'');var nodeModulesIndex=importedFile.indexOf(NODE_MODULES);var importModule=nodeModulesIndex===-1?null:importedFile.substring(nodeModulesIndex+NODE_MODULES.length);var isGeneratedFile=IS_GENERATED.test(importedFile);if(isGeneratedFile){if(importModule){return this.dotRelative(containingDir,this.genDir+NODE_MODULES+importModule);}
else{importedFile=this.rewriteGenDirPath(importedFile);return this.dotRelative(containingDir,importedFile);}}
else{if(importModule){return importModule;}
else{if(!this.isGenDirChildOfRootDir){importedFile=importedFile.replace(this.basePath,this.genDir);}
return this.dotRelative(containingDir,importedFile);}}};ReflectorHost.prototype.dotRelative=function(from,to){var rPath=path.relative(from,to).replace(/\\/g,'/');return rPath.startsWith('.')?rPath:'./'+rPath;};ReflectorHost.prototype.rewriteGenDirPath=function(filepath){var nodeModulesIndex=filepath.indexOf(NODE_MODULES);if(nodeModulesIndex!==-1){return path.join(this.genDir,filepath.substring(nodeModulesIndex));}
else{return filepath.replace(this.basePath,this.genDir);}};ReflectorHost.prototype.findDeclaration=function(module,symbolName,containingFile,containingModule){if(!containingFile||!containingFile.length){if(module.indexOf('.')===0){throw new Error('Resolution of relative paths requires a containing file.');}
containingFile=path.join(this.basePath,'index.ts');}
try{var assetUrl=this.normalizeAssetUrl(module);if(assetUrl){module=assetUrl;}
var filePath=this.resolve(module,containingFile);if(!filePath){return this.getStaticSymbol(module,symbolName);}
var tc=this.program.getTypeChecker();var sf=this.program.getSourceFile(filePath);if(!sf||!sf.symbol){return this.resolveExportedSymbol(filePath,symbolName)||this.getStaticSymbol(filePath,symbolName);}
var symbol=tc.getExportsOfModule(sf.symbol).find(function(m){return m.name===symbolName;});if(!symbol){throw new Error("can't find symbol "+symbolName+" exported from module "+filePath);}
if(symbol&&symbol.flags&ts.SymbolFlags.Alias){symbol=tc.getAliasedSymbol(symbol);}
var declaration=symbol.getDeclarations()[0];var declarationFile=this.getCanonicalFileName(declaration.getSourceFile().fileName);return this.getStaticSymbol(declarationFile,symbol.getName());}
catch(e){console.error("can't resolve module "+module+" from "+containingFile);throw e;}};ReflectorHost.prototype.getStaticSymbol=function(declarationFile,name,members){var memberSuffix=members?"."+members.join('.'):'';var key="\""+declarationFile+"\"."+name+memberSuffix;var result=this.typeCache.get(key);if(!result){result=new static_reflector_1.StaticSymbol(declarationFile,name,members);this.typeCache.set(key,result);}
return result;};ReflectorHost.prototype.getMetadataFor=function(filePath){if(!this.context.fileExists(filePath)){return;}
if(DTS.test(filePath)){var metadataPath=filePath.replace(DTS,'.metadata.json');if(this.context.fileExists(metadataPath)){var metadata=this.readMetadata(metadataPath);return(Array.isArray(metadata)&&metadata.length==0)?undefined:metadata;}}
else{var sf=this.program.getSourceFile(filePath);if(!sf){throw new Error("Source file "+filePath+" not present in program.");}
return this.metadataCollector.getMetadata(sf);}};ReflectorHost.prototype.readMetadata=function(filePath){try{return this.resolverCache.get(filePath)||JSON.parse(this.context.readFile(filePath));}
catch(e){console.error("Failed to read JSON file "+filePath);throw e;}};ReflectorHost.prototype.getResolverMetadata=function(filePath){var metadata=this.resolverCache.get(filePath);if(!metadata){metadata=this.getMetadataFor(filePath);this.resolverCache.set(filePath,metadata);}
return metadata;};ReflectorHost.prototype.resolveExportedSymbol=function(filePath,symbolName){var _this=this;var resolveModule=function(moduleName){var resolvedModulePath=_this.getCanonicalFileName(_this.resolve(moduleName,filePath));if(!resolvedModulePath){throw new Error("Could not resolve module '"+moduleName+"' relative to file "+filePath);}
return resolvedModulePath;};var metadata=this.getResolverMetadata(filePath);if(metadata){if(metadata.metadata[symbolName]){return this.getStaticSymbol(filePath,symbolName);}
if(metadata.exports){for(var _i=0,_a=metadata.exports;_i<_a.length;_i++){var moduleExport=_a[_i];if(moduleExport.export){var exportSymbol=moduleExport.export.find(function(symbol){if(typeof symbol==='string'){return symbol==symbolName;}
else{return symbol.as==symbolName;}});if(exportSymbol){var symName=symbolName;if(typeof exportSymbol!=='string'){symName=exportSymbol.name;}
return this.resolveExportedSymbol(resolveModule(moduleExport.from),symName);}}}
for(var _b=0,_c=metadata.exports;_b<_c.length;_b++){var moduleExport=_c[_b];if(!moduleExport.export){var resolvedModule=resolveModule(moduleExport.from);var candidateSymbol=this.resolveExportedSymbol(resolvedModule,symbolName);if(candidateSymbol)
return candidateSymbol;}}}}
return null;};return ReflectorHost;}());exports.ReflectorHost=ReflectorHost;var NodeReflectorHostContext=(function(){function NodeReflectorHostContext(){this.assumedExists={};}
NodeReflectorHostContext.prototype.fileExists=function(fileName){return this.assumedExists[fileName]||fs.existsSync(fileName);};NodeReflectorHostContext.prototype.directoryExists=function(directoryName){try{return fs.statSync(directoryName).isDirectory();}
catch(e){return false;}};NodeReflectorHostContext.prototype.readFile=function(fileName){return fs.readFileSync(fileName,'utf8');};NodeReflectorHostContext.prototype.assumeFileExists=function(fileName){this.assumedExists[fileName]=true;};return NodeReflectorHostContext;}());exports.NodeReflectorHostContext=NodeReflectorHostContext;