
import{ChangeDetectorRef,Directive,Input,IterableDiffers,TemplateRef,ViewContainerRef}from'@angular/core';import{getTypeNameForDebugging,isBlank,isPresent}from'../facade/lang';export var NgForRow=(function(){function NgForRow($implicit,index,count){this.$implicit=$implicit;this.index=index;this.count=count;}
Object.defineProperty(NgForRow.prototype,"first",{get:function(){return this.index===0;},enumerable:true,configurable:true});Object.defineProperty(NgForRow.prototype,"last",{get:function(){return this.index===this.count-1;},enumerable:true,configurable:true});Object.defineProperty(NgForRow.prototype,"even",{get:function(){return this.index%2===0;},enumerable:true,configurable:true});Object.defineProperty(NgForRow.prototype,"odd",{get:function(){return!this.even;},enumerable:true,configurable:true});return NgForRow;}());export var NgFor=(function(){function NgFor(_viewContainer,_templateRef,_iterableDiffers,_cdr){this._viewContainer=_viewContainer;this._templateRef=_templateRef;this._iterableDiffers=_iterableDiffers;this._cdr=_cdr;}
Object.defineProperty(NgFor.prototype,"ngForTemplate",{set:function(value){if(isPresent(value)){this._templateRef=value;}},enumerable:true,configurable:true});NgFor.prototype.ngOnChanges=function(changes){if('ngForOf'in changes){var value=changes['ngForOf'].currentValue;if(isBlank(this._differ)&&isPresent(value)){try{this._differ=this._iterableDiffers.find(value).create(this._cdr,this.ngForTrackBy);}
catch(e){throw new Error("Cannot find a differ supporting object '"+value+"' of type '"+getTypeNameForDebugging(value)+"'. NgFor only supports binding to Iterables such as Arrays.");}}}};NgFor.prototype.ngDoCheck=function(){if(isPresent(this._differ)){var changes=this._differ.diff(this.ngForOf);if(isPresent(changes))
this._applyChanges(changes);}};NgFor.prototype._applyChanges=function(changes){var _this=this;var insertTuples=[];changes.forEachOperation(function(item,adjustedPreviousIndex,currentIndex){if(item.previousIndex==null){var view=_this._viewContainer.createEmbeddedView(_this._templateRef,new NgForRow(null,null,null),currentIndex);var tuple=new RecordViewTuple(item,view);insertTuples.push(tuple);}
else if(currentIndex==null){_this._viewContainer.remove(adjustedPreviousIndex);}
else{var view=_this._viewContainer.get(adjustedPreviousIndex);_this._viewContainer.move(view,currentIndex);var tuple=new RecordViewTuple(item,view);insertTuples.push(tuple);}});for(var i=0;i<insertTuples.length;i++){this._perViewChange(insertTuples[i].view,insertTuples[i].record);}
for(var i=0,ilen=this._viewContainer.length;i<ilen;i++){var viewRef=this._viewContainer.get(i);viewRef.context.index=i;viewRef.context.count=ilen;}
changes.forEachIdentityChange(function(record){var viewRef=_this._viewContainer.get(record.currentIndex);viewRef.context.$implicit=record.item;});};NgFor.prototype._perViewChange=function(view,record){view.context.$implicit=record.item;};NgFor.decorators=[{type:Directive,args:[{selector:'[ngFor][ngForOf]'},]},];NgFor.ctorParameters=[{type:ViewContainerRef,},{type:TemplateRef,},{type:IterableDiffers,},{type:ChangeDetectorRef,},];NgFor.propDecorators={'ngForOf':[{type:Input},],'ngForTrackBy':[{type:Input},],'ngForTemplate':[{type:Input},],};return NgFor;}());var RecordViewTuple=(function(){function RecordViewTuple(record,view){this.record=record;this.view=view;}
return RecordViewTuple;}());