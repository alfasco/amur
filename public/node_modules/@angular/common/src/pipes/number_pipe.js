
import{Inject,LOCALE_ID,Pipe}from'@angular/core';import{NumberFormatStyle,NumberFormatter}from'../facade/intl';import{NumberWrapper,isBlank,isNumber,isPresent,isString}from'../facade/lang';import{InvalidPipeArgumentError}from'./invalid_pipe_argument_error';var _NUMBER_FORMAT_REGEXP=/^(\d+)?\.((\d+)(\-(\d+))?)?$/;function formatNumber(pipe,locale,value,style,digits,currency,currencyAsSymbol){if(currency===void 0){currency=null;}
if(currencyAsSymbol===void 0){currencyAsSymbol=false;}
if(isBlank(value))
return null;value=isString(value)&&NumberWrapper.isNumeric(value)?+value:value;if(!isNumber(value)){throw new InvalidPipeArgumentError(pipe,value);}
var minInt;var minFraction;var maxFraction;if(style!==NumberFormatStyle.Currency){minInt=1;minFraction=0;maxFraction=3;}
if(isPresent(digits)){var parts=digits.match(_NUMBER_FORMAT_REGEXP);if(parts===null){throw new Error(digits+" is not a valid digit info for number pipes");}
if(isPresent(parts[1])){minInt=NumberWrapper.parseIntAutoRadix(parts[1]);}
if(isPresent(parts[3])){minFraction=NumberWrapper.parseIntAutoRadix(parts[3]);}
if(isPresent(parts[5])){maxFraction=NumberWrapper.parseIntAutoRadix(parts[5]);}}
return NumberFormatter.format(value,locale,style,{minimumIntegerDigits:minInt,minimumFractionDigits:minFraction,maximumFractionDigits:maxFraction,currency:currency,currencyAsSymbol:currencyAsSymbol});}
export var DecimalPipe=(function(){function DecimalPipe(_locale){this._locale=_locale;}
DecimalPipe.prototype.transform=function(value,digits){if(digits===void 0){digits=null;}
return formatNumber(DecimalPipe,this._locale,value,NumberFormatStyle.Decimal,digits);};DecimalPipe.decorators=[{type:Pipe,args:[{name:'number'},]},];DecimalPipe.ctorParameters=[{type:undefined,decorators:[{type:Inject,args:[LOCALE_ID,]},]},];return DecimalPipe;}());export var PercentPipe=(function(){function PercentPipe(_locale){this._locale=_locale;}
PercentPipe.prototype.transform=function(value,digits){if(digits===void 0){digits=null;}
return formatNumber(PercentPipe,this._locale,value,NumberFormatStyle.Percent,digits);};PercentPipe.decorators=[{type:Pipe,args:[{name:'percent'},]},];PercentPipe.ctorParameters=[{type:undefined,decorators:[{type:Inject,args:[LOCALE_ID,]},]},];return PercentPipe;}());export var CurrencyPipe=(function(){function CurrencyPipe(_locale){this._locale=_locale;}
CurrencyPipe.prototype.transform=function(value,currencyCode,symbolDisplay,digits){if(currencyCode===void 0){currencyCode='USD';}
if(symbolDisplay===void 0){symbolDisplay=false;}
if(digits===void 0){digits=null;}
return formatNumber(CurrencyPipe,this._locale,value,NumberFormatStyle.Currency,digits,currencyCode,symbolDisplay);};CurrencyPipe.decorators=[{type:Pipe,args:[{name:'currency'},]},];CurrencyPipe.ctorParameters=[{type:undefined,decorators:[{type:Inject,args:[LOCALE_ID,]},]},];return CurrencyPipe;}());