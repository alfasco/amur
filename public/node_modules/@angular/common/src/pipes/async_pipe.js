
import{ChangeDetectorRef,Pipe,WrappedValue}from'@angular/core';import{isBlank,isPresent,isPromise}from'../facade/lang';import{InvalidPipeArgumentError}from'./invalid_pipe_argument_error';var ObservableStrategy=(function(){function ObservableStrategy(){}
ObservableStrategy.prototype.createSubscription=function(async,updateLatestValue){return async.subscribe({next:updateLatestValue,error:function(e){throw e;}});};ObservableStrategy.prototype.dispose=function(subscription){subscription.unsubscribe();};ObservableStrategy.prototype.onDestroy=function(subscription){subscription.unsubscribe();};return ObservableStrategy;}());var PromiseStrategy=(function(){function PromiseStrategy(){}
PromiseStrategy.prototype.createSubscription=function(async,updateLatestValue){return async.then(updateLatestValue,function(e){throw e;});};PromiseStrategy.prototype.dispose=function(subscription){};PromiseStrategy.prototype.onDestroy=function(subscription){};return PromiseStrategy;}());var _promiseStrategy=new PromiseStrategy();var _observableStrategy=new ObservableStrategy();var __unused;export var AsyncPipe=(function(){function AsyncPipe(_ref){this._latestValue=null;this._latestReturnedValue=null;this._subscription=null;this._obj=null;this._strategy=null;this._ref=_ref;}
AsyncPipe.prototype.ngOnDestroy=function(){if(isPresent(this._subscription)){this._dispose();}};AsyncPipe.prototype.transform=function(obj){if(isBlank(this._obj)){if(isPresent(obj)){this._subscribe(obj);}
this._latestReturnedValue=this._latestValue;return this._latestValue;}
if(obj!==this._obj){this._dispose();return this.transform(obj);}
if(this._latestValue===this._latestReturnedValue){return this._latestReturnedValue;}
else{this._latestReturnedValue=this._latestValue;return WrappedValue.wrap(this._latestValue);}};AsyncPipe.prototype._subscribe=function(obj){var _this=this;this._obj=obj;this._strategy=this._selectStrategy(obj);this._subscription=this._strategy.createSubscription(obj,function(value){return _this._updateLatestValue(obj,value);});};AsyncPipe.prototype._selectStrategy=function(obj){if(isPromise(obj)){return _promiseStrategy;}
else if(obj.subscribe){return _observableStrategy;}
else{throw new InvalidPipeArgumentError(AsyncPipe,obj);}};AsyncPipe.prototype._dispose=function(){this._strategy.dispose(this._subscription);this._latestValue=null;this._latestReturnedValue=null;this._subscription=null;this._obj=null;};AsyncPipe.prototype._updateLatestValue=function(async,value){if(async===this._obj){this._latestValue=value;this._ref.markForCheck();}};AsyncPipe.decorators=[{type:Pipe,args:[{name:'async',pure:false},]},];AsyncPipe.ctorParameters=[{type:ChangeDetectorRef,},];return AsyncPipe;}());