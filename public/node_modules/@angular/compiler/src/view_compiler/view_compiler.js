
import{Injectable}from'@angular/core';import{AnimationCompiler}from'../animation/animation_compiler';import{CompilerConfig}from'../config';import{CompileElement}from'./compile_element';import{CompileView}from'./compile_view';import{bindView}from'./view_binder';import{buildView,finishView}from'./view_builder';export{ComponentFactoryDependency,ViewFactoryDependency}from'./view_builder';export var ViewCompileResult=(function(){function ViewCompileResult(statements,viewFactoryVar,dependencies){this.statements=statements;this.viewFactoryVar=viewFactoryVar;this.dependencies=dependencies;}
return ViewCompileResult;}());export var ViewCompiler=(function(){function ViewCompiler(_genConfig){this._genConfig=_genConfig;this._animationCompiler=new AnimationCompiler();}
ViewCompiler.prototype.compileComponent=function(component,template,styles,pipes){var dependencies=[];var compiledAnimations=this._animationCompiler.compileComponent(component,template);var statements=[];var animationTriggers=compiledAnimations.triggers;animationTriggers.forEach(function(entry){statements.push(entry.statesMapStatement);statements.push(entry.fnStatement);});var view=new CompileView(component,this._genConfig,pipes,styles,animationTriggers,0,CompileElement.createNull(),[]);buildView(view,template,dependencies);bindView(view,template,compiledAnimations.outputs);finishView(view,statements);return new ViewCompileResult(statements,view.viewFactory.name,dependencies);};ViewCompiler.decorators=[{type:Injectable},];ViewCompiler.ctorParameters=[{type:CompilerConfig,},];return ViewCompiler;}());