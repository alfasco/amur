
import{Injectable}from'@angular/core';import{ReadyState,Request}from'@angular/http';import{ReplaySubject}from'rxjs/ReplaySubject';import{Subject}from'rxjs/Subject';import{take}from'rxjs/operator/take';export var MockConnection=(function(){function MockConnection(req){this.response=take.call(new ReplaySubject(1),1);this.readyState=ReadyState.Open;this.request=req;}
MockConnection.prototype.mockRespond=function(res){if(this.readyState===ReadyState.Done||this.readyState===ReadyState.Cancelled){throw new Error('Connection has already been resolved');}
this.readyState=ReadyState.Done;this.response.next(res);this.response.complete();};MockConnection.prototype.mockDownload=function(res){};MockConnection.prototype.mockError=function(err){this.readyState=ReadyState.Done;this.response.error(err);};return MockConnection;}());export var MockBackend=(function(){function MockBackend(){var _this=this;this.connectionsArray=[];this.connections=new Subject();this.connections.subscribe(function(connection){return _this.connectionsArray.push(connection);});this.pendingConnections=new Subject();}
MockBackend.prototype.verifyNoPendingRequests=function(){var pending=0;this.pendingConnections.subscribe(function(c){return pending++;});if(pending>0)
throw new Error(pending+" pending connections to be resolved");};MockBackend.prototype.resolveAllConnections=function(){this.connections.subscribe(function(c){return c.readyState=4;});};MockBackend.prototype.createConnection=function(req){if(!req||!(req instanceof Request)){throw new Error("createConnection requires an instance of Request, got "+req);}
var connection=new MockConnection(req);this.connections.next(connection);return connection;};MockBackend.decorators=[{type:Injectable},];MockBackend.ctorParameters=[];return MockBackend;}());