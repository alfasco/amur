
var __extends=(this&&this.__extends)||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];function __(){this.constructor=d;}
d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};import{Injectable}from'@angular/core';import{isPresent,isString}from'../src/facade/lang';import{RequestOptions}from'./base_request_options';import{RequestMethod}from'./enums';import{ConnectionBackend}from'./interfaces';import{Request}from'./static_request';function httpRequest(backend,request){return backend.createConnection(request).response;}
function mergeOptions(defaultOpts,providedOpts,method,url){var newOptions=defaultOpts;if(isPresent(providedOpts)){return newOptions.merge(new RequestOptions({method:providedOpts.method||method,url:providedOpts.url||url,search:providedOpts.search,headers:providedOpts.headers,body:providedOpts.body,withCredentials:providedOpts.withCredentials,responseType:providedOpts.responseType}));}
if(isPresent(method)){return newOptions.merge(new RequestOptions({method:method,url:url}));}
else{return newOptions.merge(new RequestOptions({url:url}));}}
export var Http=(function(){function Http(_backend,_defaultOptions){this._backend=_backend;this._defaultOptions=_defaultOptions;}
Http.prototype.request=function(url,options){var responseObservable;if(isString(url)){responseObservable=httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Get,url)));}
else if(url instanceof Request){responseObservable=httpRequest(this._backend,url);}
else{throw new Error('First argument must be a url string or Request instance.');}
return responseObservable;};Http.prototype.get=function(url,options){return httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Get,url)));};Http.prototype.post=function(url,body,options){return httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body:body})),options,RequestMethod.Post,url)));};Http.prototype.put=function(url,body,options){return httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body:body})),options,RequestMethod.Put,url)));};Http.prototype.delete=function(url,options){return httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Delete,url)));};Http.prototype.patch=function(url,body,options){return httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body:body})),options,RequestMethod.Patch,url)));};Http.prototype.head=function(url,options){return httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Head,url)));};Http.prototype.options=function(url,options){return httpRequest(this._backend,new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Options,url)));};Http.decorators=[{type:Injectable},];Http.ctorParameters=[{type:ConnectionBackend,},{type:RequestOptions,},];return Http;}());export var Jsonp=(function(_super){__extends(Jsonp,_super);function Jsonp(backend,defaultOptions){_super.call(this,backend,defaultOptions);}
Jsonp.prototype.request=function(url,options){var responseObservable;if(isString(url)){url=new Request(mergeOptions(this._defaultOptions,options,RequestMethod.Get,url));}
if(url instanceof Request){if(url.method!==RequestMethod.Get){throw new Error('JSONP requests must use GET request method.');}
responseObservable=httpRequest(this._backend,url);}
else{throw new Error('First argument must be a url string or Request instance.');}
return responseObservable;};Jsonp.decorators=[{type:Injectable},];Jsonp.ctorParameters=[{type:ConnectionBackend,},{type:RequestOptions,},];return Jsonp;}(Http));