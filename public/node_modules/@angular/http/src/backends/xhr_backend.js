
import{Injectable}from'@angular/core';import{__platform_browser_private__}from'@angular/platform-browser';import{Observable}from'rxjs/Observable';import{ResponseOptions}from'../base_response_options';import{ContentType,RequestMethod,ResponseContentType,ResponseType}from'../enums';import{isPresent,isString}from'../facade/lang';import{Headers}from'../headers';import{getResponseURL,isSuccess}from'../http_utils';import{XSRFStrategy}from'../interfaces';import{Response}from'../static_response';import{BrowserXhr}from'./browser_xhr';var XSSI_PREFIX=/^\)\]\}',?\n/;export var XHRConnection=(function(){function XHRConnection(req,browserXHR,baseResponseOptions){var _this=this;this.request=req;this.response=new Observable(function(responseObserver){var _xhr=browserXHR.build();_xhr.open(RequestMethod[req.method].toUpperCase(),req.url);if(isPresent(req.withCredentials)){_xhr.withCredentials=req.withCredentials;}
var onLoad=function(){var body=isPresent(_xhr.response)?_xhr.response:_xhr.responseText;if(isString(body))
body=body.replace(XSSI_PREFIX,'');var headers=Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());var url=getResponseURL(_xhr);var status=_xhr.status===1223?204:_xhr.status;if(status===0){status=body?200:0;}
var statusText=_xhr.statusText||'OK';var responseOptions=new ResponseOptions({body:body,status:status,headers:headers,statusText:statusText,url:url});if(isPresent(baseResponseOptions)){responseOptions=baseResponseOptions.merge(responseOptions);}
var response=new Response(responseOptions);response.ok=isSuccess(status);if(response.ok){responseObserver.next(response);responseObserver.complete();return;}
responseObserver.error(response);};var onError=function(err){var responseOptions=new ResponseOptions({body:err,type:ResponseType.Error,status:_xhr.status,statusText:_xhr.statusText,});if(isPresent(baseResponseOptions)){responseOptions=baseResponseOptions.merge(responseOptions);}
responseObserver.error(new Response(responseOptions));};_this.setDetectedContentType(req,_xhr);if(isPresent(req.headers)){req.headers.forEach(function(values,name){return _xhr.setRequestHeader(name,values.join(','));});}
if(isPresent(req.responseType)&&isPresent(_xhr.responseType)){switch(req.responseType){case ResponseContentType.ArrayBuffer:_xhr.responseType='arraybuffer';break;case ResponseContentType.Json:_xhr.responseType='json';break;case ResponseContentType.Text:_xhr.responseType='text';break;case ResponseContentType.Blob:_xhr.responseType='blob';break;default:throw new Error('The selected responseType is not supported');}}
_xhr.addEventListener('load',onLoad);_xhr.addEventListener('error',onError);_xhr.send(_this.request.getBody());return function(){_xhr.removeEventListener('load',onLoad);_xhr.removeEventListener('error',onError);_xhr.abort();};});}
XHRConnection.prototype.setDetectedContentType=function(req,_xhr){if(isPresent(req.headers)&&isPresent(req.headers.get('Content-Type'))){return;}
switch(req.contentType){case ContentType.NONE:break;case ContentType.JSON:_xhr.setRequestHeader('content-type','application/json');break;case ContentType.FORM:_xhr.setRequestHeader('content-type','application/x-www-form-urlencoded;charset=UTF-8');break;case ContentType.TEXT:_xhr.setRequestHeader('content-type','text/plain');break;case ContentType.BLOB:var blob=req.blob();if(blob.type){_xhr.setRequestHeader('content-type',blob.type);}
break;}};return XHRConnection;}());export var CookieXSRFStrategy=(function(){function CookieXSRFStrategy(_cookieName,_headerName){if(_cookieName===void 0){_cookieName='XSRF-TOKEN';}
if(_headerName===void 0){_headerName='X-XSRF-TOKEN';}
this._cookieName=_cookieName;this._headerName=_headerName;}
CookieXSRFStrategy.prototype.configureRequest=function(req){var xsrfToken=__platform_browser_private__.getDOM().getCookie(this._cookieName);if(xsrfToken&&!req.headers.has(this._headerName)){req.headers.set(this._headerName,xsrfToken);}};return CookieXSRFStrategy;}());export var XHRBackend=(function(){function XHRBackend(_browserXHR,_baseResponseOptions,_xsrfStrategy){this._browserXHR=_browserXHR;this._baseResponseOptions=_baseResponseOptions;this._xsrfStrategy=_xsrfStrategy;}
XHRBackend.prototype.createConnection=function(request){this._xsrfStrategy.configureRequest(request);return new XHRConnection(request,this._browserXHR,this._baseResponseOptions);};XHRBackend.decorators=[{type:Injectable},];XHRBackend.ctorParameters=[{type:BrowserXhr,},{type:ResponseOptions,},{type:XSRFStrategy,},];return XHRBackend;}());