
import{Compiler,Injector,NgModule,NgZone,Testability}from'@angular/core';import{platformBrowserDynamic}from'@angular/platform-browser-dynamic';import*as angular from'./angular_js';import{NG1_COMPILE,NG1_INJECTOR,NG1_PARSE,NG1_ROOT_SCOPE,NG1_TESTABILITY,NG2_COMPILER,NG2_COMPONENT_FACTORY_REF_MAP,NG2_INJECTOR,NG2_ZONE,REQUIRE_INJECTOR}from'./constants';import{DowngradeNg2ComponentAdapter}from'./downgrade_ng2_adapter';import{getComponentInfo}from'./metadata';import{UpgradeNg1ComponentAdapterBuilder}from'./upgrade_ng1_adapter';import{controllerKey,onError}from'./util';var upgradeCount=0;export var UpgradeAdapter=(function(){function UpgradeAdapter(ng2AppModule){this.ng2AppModule=ng2AppModule;this.idPrefix="NG2_UPGRADE_"+upgradeCount++ +"_";this.upgradedComponents=[];this.ng1ComponentsToBeUpgraded={};this.providers=[];if(!ng2AppModule){throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular 2 app.');}}
UpgradeAdapter.prototype.downgradeNg2Component=function(type){this.upgradedComponents.push(type);var info=getComponentInfo(type);return ng1ComponentDirective(info,""+this.idPrefix+info.selector+"_c");};UpgradeAdapter.prototype.upgradeNg1Component=function(name){if(this.ng1ComponentsToBeUpgraded.hasOwnProperty(name)){return this.ng1ComponentsToBeUpgraded[name].type;}
else{return(this.ng1ComponentsToBeUpgraded[name]=new UpgradeNg1ComponentAdapterBuilder(name)).type;}};UpgradeAdapter.prototype.bootstrap=function(element,modules,config){var _this=this;var ngZone=new NgZone({enableLongStackTrace:Zone.hasOwnProperty('longStackTraceZoneSpec')});var upgrade=new UpgradeAdapterRef();var ng1Injector=null;var moduleRef=null;var delayApplyExps=[];var original$applyFn;var rootScopePrototype;var rootScope;var componentFactoryRefMap={};var ng1Module=angular.module(this.idPrefix,modules);var ng1BootstrapPromise;var ng1compilePromise;ng1Module.factory(NG2_INJECTOR,function(){return moduleRef.injector.get(Injector);}).value(NG2_ZONE,ngZone).factory(NG2_COMPILER,function(){return moduleRef.injector.get(Compiler);}).value(NG2_COMPONENT_FACTORY_REF_MAP,componentFactoryRefMap).config(['$provide','$injector',function(provide,ng1Injector){provide.decorator(NG1_ROOT_SCOPE,['$delegate',function(rootScopeDelegate){rootScopePrototype=rootScopeDelegate.constructor.prototype;if(rootScopePrototype.hasOwnProperty('$apply')){original$applyFn=rootScopePrototype.$apply;rootScopePrototype.$apply=function(exp){return delayApplyExps.push(exp);};}
else{throw new Error('Failed to find \'$apply\' on \'$rootScope\'!');}
return rootScope=rootScopeDelegate;}]);if(ng1Injector.has(NG1_TESTABILITY)){provide.decorator(NG1_TESTABILITY,['$delegate',function(testabilityDelegate){var _this=this;var originalWhenStable=testabilityDelegate.whenStable;var newWhenStable=function(callback){var whenStableContext=_this;originalWhenStable.call(_this,function(){var ng2Testability=moduleRef.injector.get(Testability);if(ng2Testability.isStable()){callback.apply(this,arguments);}
else{ng2Testability.whenStable(newWhenStable.bind(whenStableContext,callback));}});};testabilityDelegate.whenStable=newWhenStable;return testabilityDelegate;}]);}}]);ng1compilePromise=new Promise(function(resolve,reject){ng1Module.run(['$injector','$rootScope',function(injector,rootScope){ng1Injector=injector;UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded,injector).then(function(){var DynamicNgUpgradeModule=NgModule({providers:[{provide:NG1_INJECTOR,useFactory:function(){return ng1Injector;}},{provide:NG1_COMPILE,useFactory:function(){return ng1Injector.get(NG1_COMPILE);}},_this.providers],imports:[_this.ng2AppModule]}).Class({constructor:function DynamicNgUpgradeModule(){},ngDoBootstrap:function(){}});platformBrowserDynamic()._bootstrapModuleWithZone(DynamicNgUpgradeModule,undefined,ngZone,function(componentFactories){componentFactories.forEach(function(componentFactory){componentFactoryRefMap[getComponentInfo(componentFactory.componentType).selector]=componentFactory;});}).then(function(ref){moduleRef=ref;angular.element(element).data(controllerKey(NG2_INJECTOR),moduleRef.injector);ngZone.onMicrotaskEmpty.subscribe({next:function(_){return ngZone.runOutsideAngular(function(){return rootScope.$evalAsync();});}});}).then(resolve,reject);});}]);});var windowAngular=window['angular'];windowAngular.resumeBootstrap=undefined;ngZone.run(function(){angular.bootstrap(element,[_this.idPrefix],config);});ng1BootstrapPromise=new Promise(function(resolve){if(windowAngular.resumeBootstrap){var originalResumeBootstrap=windowAngular.resumeBootstrap;windowAngular.resumeBootstrap=function(){windowAngular.resumeBootstrap=originalResumeBootstrap;windowAngular.resumeBootstrap.apply(this,arguments);resolve();};}
else{resolve();}});Promise.all([ng1BootstrapPromise,ng1compilePromise]).then(function(){moduleRef.injector.get(NgZone).run(function(){if(rootScopePrototype){rootScopePrototype.$apply=original$applyFn;while(delayApplyExps.length){rootScope.$apply(delayApplyExps.shift());}
upgrade._bootstrapDone(moduleRef,ng1Injector);rootScopePrototype=null;}});},onError);return upgrade;};UpgradeAdapter.prototype.upgradeNg1Provider=function(name,options){var token=options&&options.asToken||name;this.providers.push({provide:token,useFactory:function(ng1Injector){return ng1Injector.get(name);},deps:[NG1_INJECTOR]});};UpgradeAdapter.prototype.downgradeNg2Provider=function(token){var factory=function(injector){return injector.get(token);};factory.$inject=[NG2_INJECTOR];return factory;};return UpgradeAdapter;}());function ng1ComponentDirective(info,idPrefix){directiveFactory.$inject=[NG1_INJECTOR,NG2_COMPONENT_FACTORY_REF_MAP,NG1_PARSE];function directiveFactory(ng1Injector,componentFactoryRefMap,parse){var idCount=0;return{restrict:'E',require:REQUIRE_INJECTOR,link:{post:function(scope,element,attrs,parentInjector,transclude){var componentFactory=componentFactoryRefMap[info.selector];if(!componentFactory)
throw new Error('Expecting ComponentFactory for: '+info.selector);if(parentInjector===null){parentInjector=ng1Injector.get(NG2_INJECTOR);}
var facade=new DowngradeNg2ComponentAdapter(idPrefix+(idCount++),info,element,attrs,scope,parentInjector,parse,componentFactory);facade.setupInputs();facade.bootstrapNg2();facade.projectContent();facade.setupOutputs();facade.registerCleanup();}}};}
return directiveFactory;}
export var UpgradeAdapterRef=(function(){function UpgradeAdapterRef(){this._readyFn=null;this.ng1RootScope=null;this.ng1Injector=null;this.ng2ModuleRef=null;this.ng2Injector=null;}
UpgradeAdapterRef.prototype._bootstrapDone=function(ngModuleRef,ng1Injector){this.ng2ModuleRef=ngModuleRef;this.ng2Injector=ngModuleRef.injector;this.ng1Injector=ng1Injector;this.ng1RootScope=ng1Injector.get(NG1_ROOT_SCOPE);this._readyFn&&this._readyFn(this);};UpgradeAdapterRef.prototype.ready=function(fn){this._readyFn=fn;};UpgradeAdapterRef.prototype.dispose=function(){this.ng1Injector.get(NG1_ROOT_SCOPE).$destroy();this.ng2ModuleRef.destroy();};return UpgradeAdapterRef;}());